1. 요구사항명세서 User Requirement 내용 상세화
 - 기능 별 Requirement 내용 기입

참석자 : 김상우, 류지원, 박승혜, 이연주
기타사항 : 해당 파트 화요일까지 제출


https://docs.google.com/document/d/1c1OxzzR2EMYS8E3lgl4yzgSYfQ8LsfYEeMa4l1WXQyw/edit

 
 
 
 
 
 
표지





















1.   Preface
 
1.1  Objective 목적
Preface에서는 본 문서의 대상 독자층을 정의하고, 전반적인 구조와 각 목차의 역할에 대하여 제시한다. 또한 문서의 버전에 대해 버전 포맷, 버전 관리 정책, 버전 변경 기록들을 서술한다.
 
1.2  Readership 독자층
설계 명세서의 대상 독자는 시스템의 개발과 유지 보수에 참여하는 모든 구성원이다. 고객, 엔지니어, 아키텍쳐, 매니저, 외주 업체 등이 있을 수 있으며, 예를 들어 엔지니어는 또 다시 시스템 엔지니어, 시스템 테스트 엔지니어, 시스템 유지보수 엔지니어 등으로 나뉠 수 있다.
 
1.3  Document Structure 문서 구조
A. PREFACE
Preface에서는 본 문서의 대상 독자층을 정의하고, 전반적인 구조와 각 목차의 역할에 대하여 제시한다. 또한 문서의 버전에 대해 버전 포맷, 버전 관리 정책, 버전 변경 기록들을 서술한다.
 
B. INTRODUCTION
Introduction에서는 시스템 설계에 사용한 다이어그램과 툴에 대해 설명한다.
 
C. GLOSSARY
Glossary 에서는 본 문서에서 사용된 전문 용어들을 정의한다.
 
D. USER REQUIREMENT DEFINITION
User requirement Definition에서는 사용자에게 제공되는 서비스들에 대하여 자연어와 다이어그램을 이용해 서술한다. Functional 과 Nonfunctional 요구사항을 모두 포함하고 있으며, 준수되어야 하는 product and process standards에 대해서도 서술한다.
 
E. SYSTEM ARCHITECTURE
F. SYSTEM REQUIREMENT SPECIFICATION
G. SYSTEM MODELS
H. SYSTEM EVOLUTIONS
I. TESTING PLAN
J. DEVELOPMENT ENVIRONMENT
K. DEVELOPMENT PLAN
L. APPENDICES
M. INDEX
 
1.4  Document Versions 문서 버전
A. Version Format
버전 번호는 major number와 minor number로 이루어져 있으며, (major number).(minor number)의 형태로 표현한다. 문서의 버전은 0.1부터 시작한다.
 
B. Version Management Policy
설계 명세서를 수정할 때 마다 버전을 업데이트한다. 다만 변경간의 간격이 1시간 이내일 때에는 버전 번호를 업데이트하지 않고, 하나의 업데이트로 간주한다. 이미 완성된 파트를 변경할 때에는 minor number를 변경하며, 새로운 부분을 추가하거나 문서의 구성이 예전에 비해 괄목한 변화가 있을 경우 major number를 변경한다.
 
C. Version Update History
Version
Modified Date
Explanation
0.1
2018.04.29
 
1.0
 
 
 
 
2.   Introduction
2.1  Objective
Introduction에서는 시스템 설계에 사용한 다이어그램과 툴에 대해 설명한다.
 
2.2  Applied Models
A. UML
B. Package Diagram
C. Deployment Diagram
D. Class Diagram
E. Sequence Diagram
F. State Diagram
G. ER Diagram
 
2.3  Applied Tools
A. ASTAH
software design tool which support UML, ERD, DFD, Flowchart, Mindmap, SysML, GSN and more.
 
B.
 
 

3.   Glossary
3.1  Objective
Glossary 에서는 본 문서에서 사용된 전문 용어들을 정의한다.
 
3.2  Term Definitions, Acronyms, and Abbreviations
Term
Definition
Abbreviations
 
 
 
 
 
 
 
 
 
 
 
 
 
 

4.   User Requirement Definition
4.1  Objective
User requirement Definition에서는 사용자에게 제공되는 서비스들에 대하여 자연어와 다이어그램을 이용해 서술한다. 기능적, 비기능적 요구사항을 모두 포함하고 있으며, 시스템은 여기에 서술된 요구사항을 반드시 충족할 것이다. 또한, 제품이나 프로세스가 반드시 준수해야 하는 표준이 있다면 서술한다.
 
4.2  Functional Requirements
A.   회원가입
Every-Diet에서 제공하는 서비스를 이용하기 위해 회원가입을 하는 기능이다. 홈페이지 자체에서 양식을 제공하여 회원 가입 절차를 밟는다. 사용자에게 아이디, 비밀번호, 이메일, 성별, 생년월일 정보를 요구한다.
 
자체 회원가입 양식 외에도 SNS와 연동하여 회원 가입을 보다 편리하게 진행하는 기능도 제공한다. 카카오톡, Facebook, 네이버와 연동이 가능하다. 연동시에 일반적으로 필요한 사용자 이름, 프로필 이미지, 메일 주소, 성별, 생일과 같은 정보가 제공되므로 별도의 회원 정보 수집 없이 SNS 로그인만으로 바로 가입이 완료되게 구성한다.
 
B.    로그인
사용자가 Every-Diet 시스템에 로그인하는 기능이다. 기본적으로 회원가입을 통해 만들어진 아이디와 비밀번호를 이용한다. SNS와 연동된 아이디는 별도의 절차가 없이 바로 로그인 할 수 있다. 시스템에 로그인하여 자신의 정보(개인정보, 식단정보)에 접근하고 수정할 수 있다.

첫 로그인 시 사용자의 기본 정보와 관련된 정보를 받는다. 한 번 입력해놓으면 데이터베이스에 저장이 되어 나중에 식단 조건을 설정할 때에 해당 정보를 언제든지 불러들일 수 있게 하기 위해서이다. 원하지 않는 사용자는 스킵할 수 있으며, 나중에 회원 정보에서 직접 등록 및 수정할 수 있다. 사용자의 기본 정보에는 신체정보(키, 몸무게), 알러지가 있는 재료와 못먹는 재료가 포함된다. 
 
C.   식단 조건 설정
사용자가 식단 만들기를 원할 때, 만들 식단의 조건을 설정하는 기능이다. 사용자는 순차적으로 신체정보(나이, 성별, 키, 몸무게), 식단을 사용할 기간, 식단의 목적, 알러지가 있거나 못먹는 재료, 선호하는 재료를 선택한다. 데이터베이스에 등록되어 있는 기본 정보를 불러올 수도 있다.

하나의 페이지에 각 조건들을 순차적으로 입력한다. 입력하고 next를 선택할 시 다음 페이지로 넘어가게 된다. 사용자는 언제든지 뒤로 가기 버튼을 클릭하여 이전 페이지로 돌아가 입력한 선택지들을 수정할 수 있다.

페이지
세부사항
신체정보
나이, 성별, 키, 몸무게를 입력한다.
이 페이지에서 <내 정보 불러오기> 기능으로 미리 저장된 정보를 불러올 수 있다. (키, 몸무게, 알러지가 있는 재료, 절대 못 먹는 재료) 불러온 정보에 대해서는 자동 선택이 되어있고, 불러온 정보에 더해 추가로 선택할 수도 있다.
식단을 사용할 기간
1일, 1주, 2주, 3주, 4주의 선택지가 있다.
식단의 목적
체중조절(감량과 증량), 환자식(당뇨, 고혈압, 암), 유아식, 노인식, 일반식의 선택지가 있다.
알러지가 있거나,
못먹는 재료
대체적으로 알러지가 많거나 못먹는 사람이 많은 재료들을 우선적으로 보여주고, 없다면 직접 검색을 통해 데이터베이스에 있는 재료를 찾아 입력할 수 있다.
선호하는 재료
대체적으로 선호되는 재료들을 우선적으로 보여주고, 없다면 직접 검색을 통해 데이터베이스에 있는 재료를 찾아 입력할 수 있다.




D.  맞춤형 식단 제공
사용자가 입력한 조건에 맞춰 시스템이 식단을 제공하는 기능이다. 사용자가 식단 조건 설정을 완료한 후 ‘맞춤 식단 보기’ 버튼을 클릭하면 완성된 식단이 출력된다. 맞춤형 식단은 사용자의 식단 조건을 따르며, 각 조건의 우선순위가 다르다. 

한 끼는 기본적으로 1) 밥, 2) 국, 3) 주반찬, 4) 밑반찬, 5)후식/간식으로 구성되고, 하루 식단은 아침, 점심, 저녁으로 구성된다. 아래의 순서를 따라서 식단이 구성된다.


데이터베이스에 존재하는 전체 재료 중에 알러지가 있거나 절대 못먹는 재료들을 제외한다.
제외한 재료로 만들 수 있는 음식 목록(모든 조합)을 모두 추출한다.
식단의 목적에 맞춰서 g당 성분을 통하여 음식 목록을 필터링한다.
체중조절 - 감량 : g당 칼로리와 g당 단백질 
체중조절 - 증량 : ...
환자식 - 당뇨 : ...
환자식 - 고혈압 : ...
환자식 - 암 : ...
유아식 : ...
노인식 : ...
일반식 : ...

필터링된 음식 목록 중 선호 재료가 포함되어 있는 음식의 비중을 전체의 최소 30%로 하여 우선적으로 식단을 구성한다.
구성된 식단에서 하루 권장 칼로리의 +/- 10%로 맞춰질 때까지 반복적으로 식단을 수정해가며 만족이 되면 최종 식단을 출력한다.  

(결과창 그림)

 E. 식단 수정
사용자가 출력된 식단을 수정할 수 있는 기능이다. 출력된 식단 중 바꾸고자 하는 음식을 선택하면 해당 음식을 수정할 수 있다. 사용자가 직접 바꿀 음식을 기입하거나, 같은 식단 조건을 충족하는 다른 종류의 음식을 보여준다.

F. 레시피 제공
사용자가 맞춤 식단에 출력된 음식의 레시피를 확인할 수 있는 기능이다. 레시피를 보고자 하는 음식을 선택하면 해당 음식의 필요 재료와 레시피가 제공된다.

G. 식단 갤러리
사용자가 자신의 식단을 게시하거나, 다른 사용자가 게시한 식단을 볼 수 있는 기능이다. 식단들은 1차적으로 총 8개의 식단 목적에 따라 분류되며, 2차적으로 기간을 선택하여 분류된다. 추가적으로 선호 재료를 선택하여 3차 필터링을 할 수도 있다. 사용자는 검색 필터를 통해 게시된 식단들을 찾아보고, 게시물에 댓글을 달거나 추천을 할 수 있다. 추천 수 / 댓글 수가 많은 식단(게시물)이 가장 위에 나타난다. 사용자는 공개된 게시물을 언제든지 수정/삭제 할 수 있다.


4.3  Nonfunctional Requirements
A.  Product Requirement
 A.1. Performance Requirement
시스템이 효율성 측면에서 성능이 좋아야 한다. 데이터베이스에서 효율적인 필터링을 통해 개인의 조건에 잘 맞는 식단을 빠르게 출력할 수 있어야 한다.
 A.2. Security Requirement
시스템은 사용자의 아이디, 비밀번호, 개인정보 등이 유출되지 않도록 한다. 시스템 관리 페이지는 관리자를 제외한 다른 사용자들의 접근을 방지해야 한다.
 		A.3. Dependability Requirement
사용자가 시스템을 이용하여 맞춤 식단 조건을 설정할 때 문제가 없어야 한다. 사용자가 식단에 원하는 조건을 충분히 넣을 수 있는 시스템을 제공해야 한다. 출력된 식단을 수정하거나 레시피를 확인하는 기능에서 문제가 없어야 한다. 식단 갤러리에서 다른 사용자의 식단을 확인하고 댓글을 다는 기능이 원활하게 이뤄져야 한다.
 		A.4. Usability Requirement
식단 조건을 편리하게 설정할 수 있는 기능을 제공해야 한다. 조건을 입력/선택함에 있어 가시성을 높여야 한다.
 
B.  Organization Requirement
 B.1. Environmental Requirement 
해당 시스템은 사용자가 어떠한 Platform에서도 쉽게 서비스에 접근 가능하도록 구현되어야 한다. 이는 특정 platform에 맞춰 개발되는 시스템이 아닌 반응형 웹 사이트를 구현하여 사용자의 편리성을 높인다. (Bootstrap 이용)
 B.2. Operational Requirement

C.  External Requirement
 C.1. Regulatory Requirement
해당 시스템은 회원가입을 위한 사용자의 개인정보를 입력 받기 위해 사용자의 동의를 받아야 한다.
 C.2. Safety/Security Requirement
시스템은 개인 정보가 외부의 접근으로부터 안전하게 보호되기 위해 보안성을 높여야 한다. 또한 추후에 결제와 관련된 시스템을 도입할 경우 안전이 검증된 시스템을 사용하여야 한다.
 

5.   System Architecture
 
6.   System Requirement Specification
 
7.   System Models
 
8.   System Evolutions
8.1  Objective
8.2  Limitation and Assumption
8.3  Evolutions of Hardware
8.4  Evolutions of Software
8.5  Evolutions of User Requirement
8.6  Evolutions of Environment
 
9.     Appendices
10.  Index





(evolution: 식단을 이미지로 저장, 인쇄)

